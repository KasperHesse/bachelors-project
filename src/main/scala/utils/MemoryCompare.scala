package utils

import scala.io.Source

/**
 * Compares the contents of memory dump files generated by the C-program to memory dump
 * files generated by the simulator
 */
object MemoryCompare extends App {

  val testName = "gmd_cgiter"
  val hash = "c2037b"

  def apply(): Unit = {
    val DV = compare("DV")
    val INVD = compare("INVD") //Not comparing INVD right now since 1/(small difference) => large difference
    val R = compare("R")
    val Z = compare("Z")
    val TMP = compare("TMP")
    val P = compare("P")
    val Q = compare("Q")
    val U = compare("U")

    println(f"DV: ${DV._2}%.5f / ${DV._1}")
    println(f"INVD: ${INVD._2}%.5f / ${INVD._1}")
    println(f"R: ${R._2}%.5f / ${R._1}")
    println(f"Z: ${Z._2}%.5f / ${Z._1}")
    println(f"TMP: ${TMP._2}%.5f / ${TMP._1}")
    println(f"P: ${P._2}%.5f / ${P._1}")
    println(f"Q: ${Q._2}%.5f / ${Q._1}")
    println(f"U: ${U._2}%.5f / ${U._1}")
  }

  /**
   *
   * @param name
   * @param delta
   * @return A tuple: (0) is number of miscompares, (1) is average miscompare delta
   */
  def compare(name: String, delta: Double = 0.001): (Int, Double) = {

    val file1 = Source.fromFile(f"memdump/$testName/$hash/mem_$name.csv")
    val file2 = Source.fromFile(f"memdump_C/memdump_$name.csv")

    val lines1 = file1.getLines().toArray
    val lines2 = file2.getLines().toArray

    require(lines1.length == lines2.length, s"Files for [$name] must be of the same length. f1: ${lines1.length}, f2: ${lines2.length}")

    println(s"Comparing values for [$name]")
    var errCnt = 0
    var errSum = 0.0
    for(i <- 1 until lines1.length) {
      val scala = lines1(i).split(',').last.toDouble
      val c = lines2(i).split(',').last.toDouble

      if(math.abs(scala-c) > delta) {
        println(f"ERROR at $i. Scala: $scala%.5f, C: $c%.5f, Delta: ${math.abs(scala-c)}%.5f")
        errCnt += 1
        errSum += math.abs(scala-c)
      }
    }
    if(errCnt > 0) {
      errSum = errSum / errCnt
      println(f"$errCnt errors found for [$name] at delta=$delta")
      println(f"Average error: $errSum%.5f")
    }
    println("Comparison finished\n\n")

    file1.close()
    file2.close()
    (errCnt, errSum)
  }

  apply()
}
