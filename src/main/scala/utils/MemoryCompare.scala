package utils

import scala.io.Source

/**
 * Compares the contents of memory dump files generated by the C-program to memory dump
 * files generated by the simulator
 */
object MemoryCompare extends App {

  val testName = "gmd_cgiter"
  val hash = "745473"

  def apply(): Unit = {
    val DV = compare("DV")
    val INVD = compare("INVD")
    val R = compare("R")
    val Z = compare("Z")
    val TMP = compare("TMP")
    val P = compare("P")
    val Q = compare("Q")
    val U = compare("U")
    val X = compare("X")
    val XPHYS = compare("XPHYS")


    def print(x: (Int, Double), name: String): Unit = {
      println(f"$name: ${x._2}%.5f / ${x._1}")
    }

    print(DV, "DV")
    print(INVD, "INVD")
    print(R, "R")
    print(Z, "Z")
    print(TMP, "TMP")
    print(P, "P")
    print(Q, "Q")
    print(U, "U")
    print(X, "X")
    print(XPHYS, "XPHYS")

/*
    //Compare values of P,Q-vectors in gmd_cgiter/d7026d and gmd_cgiter/587719
    val p1 = Source.fromFile("memdump/gmd_cgiter/d7026d/mem_P.csv")
    val p2 = Source.fromFile("memdump/gmd_cgiter/587719/mem_P.csv")
    val q1 = Source.fromFile("memdump/gmd_cgiter/d7026d/mem_Q.csv")
    val q2 = Source.fromFile("memdump/gmd_cgiter/587719/mem_Q.csv")

    val P1 = p1.getLines().toArray
    val P2 = p2.getLines().toArray
    val Q1 = q1.getLines().toArray
    val Q2 = q2.getLines().toArray

    var errCnt = 0
    var errAvg = 0.0
    for (i <- 1 until P1.length) {
      val v1 = P1(i).split(',').last.toDouble
      val v2 = P2(i).split(',').last.toDouble
      if(math.abs(v1-v2) > 0.001) {
        println(f"ERROR at $i. P1: $v1%.5f, P2: $v2%.5f, Delta: ${math.abs(v1-v2)}%.5f")
        errCnt += 1
        errAvg += math.abs(v1-v2)
      }
    }
    if(errCnt > 0) {
      errAvg = errAvg / errCnt
      println(f"$errCnt errors found for [P]")
      println(f"Average error: $errAvg%.5f")
    }
    println("Comparison finished for P\n")

    errCnt = 0
    errAvg = 0.0
    for (i <- 1 until Q1.length) {
      val v1 = Q1(i).split(',').last.toDouble
      val v2 = Q2(i).split(',').last.toDouble
      if(math.abs(v1-v2) > 0.0000001) {
        println(f"ERROR at $i. Q1: $v1, Q2: $v2, Delta: ${math.abs(v1-v2)}")
        errCnt += 1
        errAvg += math.abs(v1-v2)
      }
    }
    if(errCnt > 0) {
      errAvg = errAvg / errCnt
      println(f"$errCnt errors found for [Q]")
      println(f"Average error: $errAvg%.7f")
    }
    println("Comparison finished for Q\n")
    */
  }

  /**
   *
   * @param name
   * @param delta
   * @return A tuple: (0) is number of miscompares, (1) is average miscompare delta
   */
  def compare(name: String, delta: Double = 0.001): (Int, Double) = {

    val file1 = Source.fromFile(f"memdump/$testName/$hash/mem_$name.csv")
    val file2 = Source.fromFile(f"memdump_C/memdump_$name.csv")

    val lines1 = file1.getLines().toArray
    val lines2 = file2.getLines().toArray

    require(lines1.length == lines2.length, s"Files for [$name] must be of the same length. f1: ${lines1.length}, f2: ${lines2.length}")

    println(s"Comparing values for [$name]")
    var errCnt = 0
    var signCnt = 0
    var errAvg = 0.0
    for(i <- 1 until lines1.length) {
      val scala = lines1(i).split(',').last.toDouble
      val c = lines2(i).split(',').last.toDouble

      if(math.abs(scala-c) > delta) {
        println(f"ERROR at $i. Scala: $scala%.5f, C: $c%.5f, Delta: ${math.abs(scala-c)}%.5f")
        errCnt += 1
        errAvg += math.abs(scala-c)
      }
      if(scala <= 0 && c > 0 || c <= 0 && scala > 0) {
        signCnt += 1
        println(f"SIGNERR at $i")
      }
    }
    if(errCnt > 0) {
      errAvg = errAvg / errCnt
      println(f"$errCnt errors found for [$name] at delta=$delta")
      println(f"Average error: $errAvg%.5f")
    }
    println(f"Signcnt=$signCnt")

    println("Comparison finished\n\n")

    file1.close()
    file2.close()
    (errCnt, errAvg)
  }

  apply()
}
