// Picks up after generateMatrixDiagonal and cgLoop setup, performing one iteration of the CG loop
func applyStateOperator(DENS, INPUT, OUTPUT) = {

    pstart double //Setup e0, emin constants. Running twice to also clear v0 in both threads
    estart
    add.is s1, s0, 0.0078125
    mul.ss s1, s1, s1 //s1 = 6.1e-5
    add.is s2, s0, 0.015625
    mul.ss s2, s1, s2 //s2 = 9.5e-7 ~= 1e-6 = emin
    add.is s1, s0, 1 //s1 = 1 = e0
    sub.ss s1, s1, s2 //s1 = e0-emin
    mul.sv v0, s0, v0 //clear v0
    eend
    pend

    //Clear output vector
    pstart ndof
    estart
    eend
    st.vec v0, OUTPUT
    pend

    pstart nelemdof //Loop over elements and perform applyStateOperator
    ld.dof v0, INPUT
    ld.dof v1, OUTPUT
    ld.elem x0, DENS
    estart
    mul.xx x1, x0, x0 //x0 = pow(x,2)
    mul.xx x1, x1, x0 //x1 = pow(x,3)
    mul.sx x1, s1, x1 //x1 = pow(x,3)*(e0-emin)
    add.sx x1, s2, x1 //x1 = emin+pow(x,3)*(e0-emin)
    mul.xv v2, x1, v0 //v2 = u_local*elementScale
    mac.kv v2, v2     //v2 = out_local = ke*(u_local*elementScale)
    add.vv v2, v2, v1 //out[edof[i]] += out_local[i]
    eend
    st.dof v2, OUTPUT
    st.fdof v0, OUTPUT //Store fixed DOFs from inp. values
    pend
}
//Scalar square root
//REG1: Input value to take sqrt of, will also contain result when finished
//REG2, REG3, REG4: Additional registers than can be used as temps
//LABEL: A label to be used for the square root loop. Must be unique from any other label in the program
func sqrt_S(REG1, REG2, REG3, REG4, LABEL) = {
    pstart single
    estart
    add.ss REG2, REG1, s0 //REG2 = REG1 = S = initial estimate
    add.ss REG3, s0, s0   //s3 = loop counter = 0
    eend
    pend

    //Cannot add label as we have multiple sqrts in the system. Using it for now, though
    LABEL:
    pstart single
    estart
    div.ss REG4, REG1, REG2 //REG4 = S/xn
    add.ss REG4, REG4, REG2 //REG4 = xn + S/xn
    mul.is REG2, REG4, 0.5  //REG2 = xnew = 1/2*(xn+S/xn), iteration finished
    add.is REG3, REG3, 1    //increment loop counter
    add.is REG4, s0,   4    //REG4 = 4
    mul.is REG4, REG4, 5    //REG4 = 20 = number of iterations to perform
    eend
    pend

    blt REG3, REG4, LABEL

    pstart single
    estart
    add.ss REG1, REG2, s0 //copy result from REG2 into REG1
    eend
    pend
}

CG_MAIN_LOOP:

//Update values of z
pstart ndof
ld.vec v0, INVD
ld.vec v1, R
estart
mul.vv v2, v0, v1 //z[i]=invd[i]*r[i]
eend
st.vec v2, Z
pend

//Calculate rho=dpr(R, Z)
pstart ndof
ld.vec v0, R
ld.vec v1, Z
estart
mac.vv s12, v0, v1 = s12=rho=dpr(R, Z)
eend
pend

//Update values in P
bne s8, s0, CG_P_NOT_FIRST_ITER //when cgIter != 0, branch
pstart ndof //First iteration, p[i]=z[i]
ld.vec v0, Z
estart
eend
st.vec v0, P //p[i]=z[i]
pend
beq s0, s0 CG_POST_P_UPDATE

CG_P_NOT_FIRST_ITER:
pstart single //Not first iteration, p=beta*p[i]+z[i]
estart
div.ss s1, s12, s11 //s1 = beta=rho/rhoOld
eend
pend

pstart ndof
ld.vec v0, Z
ld.vec v1, P
estart
mul.sv v1, s1, v1 //v1 = beta*p[i]
add.vv v1, v1, v0 //v1 = beta*pi[i] + z[i]
eend
st.vec v1, P
pend

CG_POST_P_UPDATE:

//xphys=dens, P=in, Q=out
applyStateOperator(XPHYS, P, Q)

pstart ndof //Calculate dpr=dpr(P,Q)
ld.vec v0, P
ld.vec v1, Q
estart
mac.vv s10, v0, v1 //s10 = dpr(P, Q)=dpr
eend
pend

pstart single //calculate alpha, rhoOld
estart
div.ss s9, s12, s10 //s9=alpha=rho/dpr
add.ss s11, s12, s0 //s11 = rhoold = rho
eend
pend


//Update values of U and R
pstart ndof
ld.vec v0, U
ld.vec v1, R
ld.vec v2, P
ld.vec v3, Q
estart
mul.sv v2, s9, v2 //v2 = alpha*p[i]
mul.sv v3, s9, v3 //v3 = alpha*q[i]
add.vv v0, v0, v2 //v0 = u[i] += alpha*p[i]
sub.vv v1, v1, v3 //v1 = r[i] -= alpha*q[i]
eend
st.vec v0, U
st.vec v1, R
pend

pstart ndof //Calculate relres
ld.vec v0, R
estart
mac.vv s1, v0, v0 //s1 = dpr(R, R)
eend
pend

//s1 = norm(R). s1=input/output, s2,s3,s4 are temp registers, RELRES is the label used for symbol table
sqrt_S(s1, s2, s3, s4, RELRES)

pstart single
estart
div.ss s1, s1, s13 //s1 = norm(r)/bnorm = relres
add.is s8, s8, 1 //cgIter++
add.is s2, s0, 5 //Number of iteration to perform while testing
mul.is s2, s2, 4 //num iters = 20
mul.is s2, s2, 3 //num iters = 60
eend
pend


blt s1, s6, CG_END_LOOP //if relres < tol, break out
blt s8, s2, CG_MAIN_LOOP //While cgIter < custom maxIter, keep running the loop

//bge s8, s7, CG_END_LOOP //if cgIter >= maxIter, break out
//beq s0, s0 CG_MAIN_LOOP: //else, return to top of loop
//Commented out for sim. purposes
CG_END_LOOP: