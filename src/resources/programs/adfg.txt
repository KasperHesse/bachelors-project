// Performs the initial setup of top.txt, up to and including the call to applyDensityFilterGradient

// VEC: The NELEM long vector that ADFG should be applied to. Should be either DV or DC
func applyDensityFilterGradient(VEC) = {
    //For each element, calculate unityscale and scale the central element by this value. Store that value in tmp
    //Unityscale is obtained by getting all neighbours, dividing by themselves to get 1, and then multiplying
    //neighbours with their known, constant filterweight. Summing all filterweights gives unityscale
    pstart double //Initial setup
    estart
    mul.sx x0, s0, x0 //clear x0
    add.ix x0, x0, 1 //Set x0=1
    eend
    pend

    pstart nelemstep //Step through all elements
    ld.sel x1, VEC //x1 = v[e1]
    ld.fcn x2, VEC //x2 = fcn[e1]
    ld.edn1 x3, VEC //x3 = edn1[e1]
    ld.edn2 x4, VEC //x4 = edn2[e1]
    estart
    nez.xx x2, x2     //all non-zero elements become 1, zeros stay zero
    nez.xx x3, x3     // --||--
    nez.xx x4, x4     // --||--
    mul.ix x2, x2, 0.5 //face neighbour weight = 0.5
    mul.ix x3, x3, 0.08578 //Edge neighbour weight = 0.08578
    mul.ix x4, x4, 0.08578 //edge neighbour weight = 0.08578
    red.xx s1, x0, x2  //Sum all face neighbour weightings
    red.xx s2, x0, x3  //Sum some edge neigbour weights
    add.ss s1, s1, s2  //Add partial sum
    red.xx s2, x0, x4  //Sum remaining edge neighbour weights
    add.ss s1, s1, s2  //Add remaining edge neighbours
    add.is s1, s1, 1.5 //Add central element weighting. s1 = unityscale
    div.is s1, s1, 1   //s1 = 1/unityscale
    mul.sx x1, s1, x1  //x1 = v[e1]/unityscale
    eend
    st.sel x1, TMP
    pend

    //For each element in DV, clear its value. Then loop through neighbourhood, setting new element
    //value to be a scaled version of all input values in tmp
    pstart nelemstep //Through all elements
    ld.sel x1, TMP
    ld.fcn x2, TMP
    ld.edn1 x3, TMP
    ld.edn2 x4, TMP
    estart //We need both the original values AND count of values
    mul.ix x2, x2, 0.5 //scale face neighbours
    mul.ix x3, x3, 0.08578 //Scale edge neighbours
    mul.ix x4, x4, 0.08578 //Scale edge neighbours
    mul.ix x1, x1, 1.5 //Scale central element
    red.xx s1, x1, x0 //Sum values in x1
    red.xx s2, x2, x0 //Sum values in x2
    add.ss s1, s1, s2
    red.xx s2, x3, x0 //Sum values in x3
    add.ss s1, s1, s2
    red.xx s2, x4, x0 //Sum values in x4
    add.ss s1, s1, s2 //s1 = v[e1] += filterWeight*tmp[e2] for all neighbours
    nez.xx x1, x1     //Reset value in x1 to a 1
    mul.sx x1, s1, x1 //Set first value in x1 to new element value
    eend
    st.sel x1, VEC
    pend
}

//This is where all the setup in top3dcg is performed
//populate design space
//Volfrac = 0.2
tstart clear //start timing module, resetting the contents of the registers

pstart single // Setup value of volfrac = 0.2
estart
add.is s1, s0, 0.203125 //Closest imm value to 0.2
add.is s2, s0, 0.0546875 //Helper value to make 0.203125 more precise
mul.ss s3, s2, s2 //s2 = 0.0029
sub.ss s1, s1, s3 //s1 = 0.200134
add.is s2, s0, 0.109375 //Helper value
mul.ss s2, s2, s2 //s2 = 0.011962890625
mul.ss s2, s2, s2 //s2 = 1.431e-4
sub.ss s1, s1, s2 //s2 = 0.19999116, diff. from 0.20... is 8.83e-6
add.is s2, s0, 0.0546875 //helper value
mul.ss s2, s2, s2 //0.0029907
mul.ss s2, s2, s2 //8.944e-6
add.ss s1, s1, s2 //s1 = 0.2000001110. Diff from 0.20... is 1.11e-7
eend
pend

pstart double //Init v0,v1 in both threads to 0.2 and 1, respectively
estart
mul.sv v0, s0, v0 //Clear v0
add.iv v1, v0, 1  //Set v1 = 1
add.sv v0, s1, v0 //Set v0 = 0.2
eend
pend

pstart nelemvec //Init X, XPHYS and DV vectors
estart
eend
st.vec v0, X
st.vec v0, XPHYS
st.vec v1, DV
pend

applyDensityFilterGradient(DV)

tend