//Function definitions

// VEC: The NELEM long vector that ADFG should be applied to. Should be either DV or DC
func applyDensityFilterGradient(VEC) = {
    //For each element, calculate unityscale and scale the central element by this value. Store that value in tmp
    //Unityscale is obtained by getting all neighbours, dividing by themselves to get 1, and then multiplying
    //neighbours with their known, constant filterweight. Summing all filterweights gives unityscale
    pstart double //Initial setup
    estart
    mul.sx x0, s0, x0 //clear x0
    add.ix x0, x0, 1 //Set x0=1
    eend
    pend

    pstart nelemstep //Step through all elements
    ld.sel x1, VEC //x1 = v[e1]
    ld.fcn x2, VEC //x2 = fcn[e1]
    ld.edn1 x3, VEC //x3 = edn1[e1]
    ld.edn2 x4, VEC //x4 = edn2[e1]
    estart
    div.xx x2, x2, x2 //x2 = x2/x2 (all non-zero elements become 1, zeros stay zero)
    div.xx x3, x3, x3 //x3 = x3/x3
    div.xx x4, x4, x4 //x4 = ones
    mul.ix x2, x2, 0.5 //face neighbour weight = 0.5
    mul.ix x3, x3, 0.08578 //Edge neighbour weight = 0.08578
    mul.ix x4, x4, 0.08578 //edge neighbour weight = 0.08578
    red.xx s1, x0, x2 //Sum all face neighbour weightings
    red.xx s2, x0, x3 //Sum some edge neigbour weights
    add.ss s1, s1, s2 //Add partial sum
    red.xx s2, x0, x4 //Sum remaining edge neighbour weights
    add.ss s1, s1, s2 //Add remaining edge neighbours
    add.is s1, s1, 1.5 //Add central element weighting. s1 = unityscale
    div.is s1, s1, 1 //s1 = 1/unityscale
    mul.sx x1, s1, x1 //x1 = v[e1]/unityscale
    eend
    st.sel x1, TMP
    pend

    //For each element in DV, clear its value. Then loop through neighbourhood, setting new element
    //value to be a scaled version of all input values in tmp
    pstart nelemstep //Through all elements
    ld.sel x1, TMP
    ld.fcn x2, TMP
    ld.edn1 x3, TMP
    ld.edn2 x4, TMP
    estart //We need both the original values AND count of values
    mul.ix x2, x2, 0.5 //scale face neighbours
    mul.ix x3, x3, 0.08578 //Scale edge neighbours
    mul.ix x4, x4, 0.08578 //Scale edge neighbours
    mul.ix x1, x1, 1.5 //Scale central element
    red.xx s1, x1, x0 //Sum values in x1
    red.xx s2, x2, x0 //Sum values in x2
    add.ss s1, s1, s2
    red.xx s2, x3, x0 //Sum values in x3
    add.ss s1, s1, s2
    red.xx s2, x4, x0 //Sum values in x4
    add.ss s1, s1, s2 //s1 = v[e1] += filterWeight*tmp[e2] for all neighbours
    div.xx x1, x1, x1 //Reset value in x1 to a single value
    mul.sx x1, s1, x1 //Set first value in x1 to new element value
    eend
    st.sel x1, VEC
    pend
}

//IN: Input vector (X)
//OUT: Output vector (XPHYS)
func applyDensityFilter(IN, OUT) = {
    pstart double
    estart
    mul.sx x0, s0, x0 //Clear x0
    add.ix x0, x0, 1  //x0 = 1
    eend
    pend

    //Perform computation of applyDensityFilter
    //All elements are traversed, and every element's neighbours are loaded into x-registers
    //Each neighbour is multiplied with its corresponding filterweight, and the sum of weighted
    //neighbours is stored in out[e1].
    //The value unityScale is found as the sum of filterweights * number of elements with that weight
    //The value in out[e1] is scaled by this value
    pstart nelemstep
    ld.fcn x1,  IN //x1 = face neighbours
    ld.edn1 x2, IN //x2 = edge neighbours
    ld.edn2 x3, IN //x3 = edge neighbours
    ld.sel x4,  IN //x4 = central element density
    estart
    mul.ix x1, x1, 0.5 //multiply face-neighbours with their fw
    mul.ix x2, x2, 0.08578 //multiply edge-neighbours with their fw
    mul.ix x3, x3, 0.08578 //multiple edge-neighbours with their fw
    mul.ix x4, x4, 1.5 //multiply central element with fw

    red.xx s1, x1, x0 //sum of face neighbours
    red.xx s2, x2, x0 //sum of edge neighbours
    red.xx s3, x3, x0 //sum of edge neighbours
    red.xx s4, x4, x0 //sum of central element

    add.ss s1, s1, s2 //faces + some edges
    add.ss s1, s1, s3 //faces + remaining edges
    add.ss s1, s1, s4 //add central element. s1 = out[e1] = sum(filterweight_i*rho[e2_i]

    div.xx x1, x1, x1 //Divide x1 by itself to get 1's in all non-zero positions
    div.xx x2, x2, x2 // --||--
    div.xx x3, x3, x3 // --||--

    mul.ix x1, x1, 0.5 //Multiply #face neighbours with fw
    mul.ix x2, x2, 0.08578 //Multiply #edge neighbours with fw
    mul.ix x3, x3, 0.08578 // --||--

    red.xx s2, x1, x0 //sum of filterweights for face neighbours
    red.xx s3, x2, x0 //sum of filterweights for edge neighbours
    red.xx s4, x3, x0 //sum of filterweights for edge neighbours

    add.ss s2, s2, s3  //sum faces and some edge
    add.ss s2, s2, s4  //sum faces and remaining edges
    add.is s2, s2, 1.5 //add fw from central element, s2=unityScale

    div.ss s1, s1, s2 //s1 = out[e1]/unityScale
    mul.sx x1, s0, x1 //zero out x1
    add.sx x1, s1, x1 //copy s-value into x1. We can only perform st.sel with x-registers
    eend
    st.sel x1, OUT
    pend
}


//DENS: The vector containing densities. Either X or XPHYS
//INPUT: The input vector being used: Either U, P
//OUTPUT: The output vector: Either R, Q
func applyStateOperator(DENS, INPUT, OUTPUT) = {

    pstart double //Setu up e0, emin constants. Being setup twice, but that's OK
    estart
    add.is s1, s0, 0.0078125
    mul.ss s1, s1, s1 //s1 = 6.1e-5
    add.is s2, s0, 0.015625
    mul.ss s2, s1, s2 //s2 = 9.5e-7 ~= 1e-6 = emin
    add.is s1, s0, 1 //s1 = 1 = e0
    sub.ss s1, s1, s2 //s1 = e0-emin
    mul.sv v0, s0, v0 //clear v0
    eend
    pend

    //Clear output vector
    pstart ndof
    estart
    eend
    st.vec v0, OUTPUT
    pend

    pstart nelemdof //Loop over elements and perform applyStateOperator
    ld.dof v0, INPUT
    ld.dof v1, OUTPUT
    ld.elem x0, DENS
    estart
    mul.xx x1, x0, x0 //x0 = pow(x,2)
    mul.xx x1, x1, x0 //x1 = pow(x,3)
    mul.sx x1, s1, x1 //x1 = pow(x,3)*(e0-emin)
    add.sx x1, s2, x1 //x1 = emin+pow(x,3)*(e0-emin)
    mul.xv v2, x1, v0 //v2 = u_local*elementScale
    mac.kv v2, v2     //ke*(u_local*elementScale)
    add.vv v2, v2, v1 //out[edof[i]] += out_local[i]
    eend
    st.dof v2, OUTPUT
    st.fdof v0, OUTPUT //Store fixed DOFs from inp. values
    pend
}

//GenerateMatrixDiagonal ALWAYS uses XPHYS as input and INVD as output
func generateMatrixDiagonal() = {
    //Setup constants
    pstart double
    estart
    add.is s1, s0, 0.0078125
    mul.ss s1, s1, s1 //s1 = 6.1e-5
    add.is s2, s0, 0.015625
    mul.ss s2, s1, s2 //s2 = 9.5e-7 ~=1e-6 = emin
    add.is s1, s0, 1 //s1 = 1 = e0
    sub.ss s1, s1, s2 //s1 = e0-emin
    //Get a very close approximation to the actual value of KE-diag
    add.is s3, s0, 0.235043 //ke diagonal value, gets imm-rounded to 0.234375
    add.is s4, s0, 0.0258457 //helper value to increase precision
    mul.ss s4, s4, s4 //helper value
    add.ss s3, s3, s4 //s3 = 0.2349243
    add.is s4, s0, 0.0491455 //helper value
    mul.ss s5, s4, s4 //helper
    mul.ss s5, s5, s4 //helper
    add.ss s3, s3, s5 //s3 = ke[diag] = 0.2350273. Diff from actual value is 1.5e-5
    add.is s4, s0, 0.0625 //helper
    mul.ss s5, s4, s4 //helper = 0.00390625
    mul.ss s5, s5, s5 //helper = 0.00001525878906
    add.ss s3, s3, s5 //s3 = ke[diag] = 0.23504257, diff from actual value is 4.28e-7

    mul.sv v0, s0, v0 //Clear v0
    add.iv v1, v0, 1  //v1 = 1 = Fixed dof values for diag
    add.sv v2, s3, v0 //v2 = ke diagonal value
    eend
    pend

    //Clear invd vector
    pstart ndof
    estart
    eend
    st.vec v0, INVD
    pend

    pstart nelemdof //Main loop, generate diag values
    ld.dof v0, INVD
    ld.elem x0, XPHYS
    estart
    mul.xx x1, x0, x0 //x1 = pow(x,2)
    mul.xx x1, x1, x0 //x1 = pow(x,3)
    mul.sx x1, s1, x1 //x1 = pow(x,3)*(e0-emin)
    add.sx x1, s2, x1 //x1 = emin + pow(x,3)*(e0-emin) = elementScale
    mul.xv v3, x1, v2 //v3 = elementScale * ke[ii][ii] = elementScale * keDiag
    add.vv v0, v0, v3 //diag[edof[ii]] += elementScale * ke[ii][ii]
    eend
    st.dof v0, INVD //Store dofs
    st.fdof v1, INVD //Store fixed dofs with value = 1
    pend

    //Invert values
   pstart ndof
   ld.vec v0, INVD
   estart
   div.iv v0, v0, 1 //v0 = 1/invD
   eend
   st.vec v0, INVD
   pend
}

//Computes compliance and sensitivity metrics after solving the CG loop
//DENS: Element densitites (XPHYS)
//INPUT: Element stiffness values (U)
//CHANGE: Change in element densities (DC)
func getComplianceAndSensitivity(DENS, INPUT, CHANGE) = {

    //Setup e0 and emin constants in s1 and s2.
    //Use a scaling value of 1/100 to avoid overflows when performing arithmetic
    //Rescale results with 10000 at the end
    pstart double
    estart
    add.is s1, s0, 0.0078125
    mul.ss s1, s1, s1 //s1 = 6.1e-5
    add.is s2, s0, 0.015625
    mul.ss s2, s1, s2 //s2 = 9.5e-7 ~= 1e-6 = emin
    add.is s1, s0, 1  //s1 = 1 = e0
    sub.ss s1, s1, s2 //s1 = e0-emin

    //Set up scaling values in both threads
    mul.sv v2, s0, v0 //clear v2
    add.iv v2, v2, 5  //v2=5
    mul.iv v2, v2, 5  //v2=25
    mul.iv v2, v2, 4  //v2 =100
    div.iv v2, v2, 1 //v2 = 1/100
    mul.sx x2, s0, x0 //clear x2
    add.ix x2, x2, 5  //x2 = 5
    mul.ix x2, x2, 5  //x2 = 25
    mul.ix x2, x2, 4  //x2 = 100
    mul.xx x2, x2, x2 //x2 = 10000, to rescale values after computation
    eend
    pend

    //Perform compliance and sensitivity loop
    pstart nelemdof
    ld.elem x0, DENS
    ld.dof v0, INPUT
    estart
    mul.vv v0, v0, v2 //v0 = v0/100
    mac.kv v1, v0 //calculate ke*u_local
    red.vv x1, v1, v0 //calculate u_local^T*(ke*u_local), eight scalars going into x-registers
    mul.xx x0, x0, x0 //x0 = pow(x[elementIndex],2)
    mul.sx x0, s1, x0 //x0 = (e0-emin)*(pow(x,2))
    mul.ix x0, x0, -3 //x0 = (-penal)*(e0-emin)*(pow(x,2))
    mul.xx x0, x0, x1 //x2 = clocal*(-penal)*(e0-emin)*(pow(x,2))
    mul.xx x0, x0, x2 //x2 = x2*10000, rescale values
    eend
    st.elem x0, CHANGE
    pend
}

//Scalar square root with an unrolled loop
//This unrolled loop always uses 5 iterations. Should only be used for bnorm calculations
//REG1: Input value to take sqrt of, will also contain result when finished
//REG2, REG3, REG4: Additional registers than can be used as temps
func sqrt_S_unrolled(REG1, REG2, REG3, REG4) = {
    pstart single
    estart
    add.ss REG2, REG1, s0 //REG2 = xn = S/2
    add.is REG3, s0, 0.5 //s3 = constant 1/2

    //Unrolled loop
    div.ss REG4, REG1, REG2 //REG4 = S/xn
    add.ss REG4, REG4, REG2 //REG4 = xn + S/xn
    mul.ss REG2, REG3, REG4 //REG2 = xnew = 1/2*(xn+S/xn), first iteration
    div.ss REG4, REG1, REG2 //REG4 = S/xn
    add.ss REG4, REG4, REG2 //REG4 = xn + S/xn
    mul.ss REG2, REG3, REG4 //REG2 = xnew = 1/2*(xn+S/xn), second iteration
    div.ss REG4, REG1, REG2 //REG4 = S/xn
    add.ss REG4, REG4, REG2 //REG4 = xn + S/xn
    mul.ss REG2, REG3, REG4 //REG2 = xnew = 1/2*(xn+S/xn), third iteration
    div.ss REG4, REG1, REG2 //REG4 = S/xn
    add.ss REG4, REG4, REG2 //REG4 = xn + S/xn
    mul.ss REG2, REG3, REG4 //REG2 = xnew = 1/2*(xn+S/xn), fourth iteration
    div.ss REG4, REG1, REG2 //REG4 = S/xn
    add.ss REG4, REG4, REG2 //REG4 = xn + S/xn
    mul.ss REG1, REG3, REG4 //REG1 = xnew = sqrt(S), fifth and final iteration
    eend
    pend
}

//Scalar square root with a loop, 20 iterations
//REG1: Input value to take sqrt of, will also contain result when finished
//REG2, REG3, REG4: Additional registers than can be used as temps
//LABEL: A label to be used for the square root loop. Must be unique from any other label in the program
func sqrt_S(REG1, REG2, REG3, REG4, LABEL) = {
    //Set up initial estimate and loop counter
    pstart single
    estart
    add.ss REG2, REG1, s0 //REG2 = REG1 = S = initial estimate
    add.ss REG3, s0, s0   //s3 = loop counter = 0
    eend
    pend

    //Perform loops
    LABEL:
    pstart single
    estart
    div.ss REG4, REG1, REG2 //REG4 = S/xn
    add.ss REG4, REG4, REG2 //REG4 = xn + S/xn
    mul.is REG2, REG4, 0.5  //REG2 = xnew = 1/2*(xn+S/xn), iteration finished
    add.is REG3, REG3, 1    //increment loop counter
    add.is REG4, s0,   4    //REG4 = 4
    mul.is REG4, REG4, 5    //REG4 = 20 = number of iterations to perform
    eend
    pend

    blt REG3, REG4, LABEL

    pstart single
    estart
    add.ss REG1, REG2, s0 //copy result from REG2 into REG1
    eend
    pend
}


// Calculates the square root of values in vector registers
// This is meant to be called inside of an estart/eend block in the lagrange updater
// Unrolled loop with 5 iterations
// REG1: Input/output: In: Value to take sqrt of, out: sqrt of that value
// REG2, REG3: Two temp registers used for calculations
func sqrt_V_inline(REG1, REG2, REG3) = {
    mul.sv REG2, s0, REG2 //Clear the value of reg2
    add.vv REG2, REG2, REG1 //Copy value of REG1 (input) to REG2
    //First iteration
    div.vv REG3, REG1, REG2 //REG3 = S/xn
    add.vv REG3, REG3, REG2 //REG3 = xn + S/xn
    mul.iv REG2, REG3, 0.5  //REG2 = xnew = 1/2*(xn+S/xn)
    //Second iteration
    div.vv REG3, REG1, REG2 //REG3 = S/xn
    add.vv REG3, REG3, REG2 //REG3 = xn + S/xn
    mul.iv REG2, REG3, 0.5  //REG2 = xnew = 1/2*(xn+S/xn)
    //Third iteration
    div.vv REG3, REG1, REG2 //REG3 = S/xn
    add.vv REG3, REG3, REG2 //REG3 = xn + S/xn
    mul.iv REG2, REG3, 0.5  //REG2 = xnew = 1/2*(xn+S/xn)
    //Fourth iteration
    div.vv REG3, REG1, REG2 //REG3 = S/xn
    add.vv REG3, REG3, REG2 //REG3 = xn + S/xn
    mul.iv REG2, REG3, 0.5  //REG2 = xnew = 1/2*(xn+S/xn)
    //Fifth iteration
    div.vv REG3, REG1, REG2 //REG3 = S/xn
    add.vv REG3, REG3, REG2 //REG3 = xn + S/xn
    mul.iv REG1, REG3, 0.5  //REG2 = xnew = 1/2*(xn+S/xn)
}

//SAVED REGISTERS
//Always saved:
//s15: Loop (top3dcg loop counter)
//s14: change (change value from top3dcg)

//Saved registers when performing solveStateCG
//s13: bnorm
//s12: rho
//s11: rhoold
//s10: dpr
//s9 : alpha
//s8 : cgIter
//s7 : maxIter
//s6 : tol

//Saved registers when performing top3dcg-lagrange
//s13 : g
//s12 : l2
//s11 : l1
//s10 : move
//s9  : tol
//s7  : lmid (not using s8 to preserve cgIter in register dumps after simulation)


//START CODE

tstart clear //start timing module

//Populate design space
//Get a very close approximation to 0.2 to use as volfrac
pstart single
estart
add.is s1, s0, 0.203125 //Closest imm value to 0.2
add.is s2, s0, 0.0546875 //Helper value to make 0.203125 more precise
mul.ss s3, s2, s2 //s2 = 0.0029
sub.ss s1, s1, s3 //s1 = 0.200134
add.is s2, s0, 0.109375 //Helper value
mul.ss s2, s2, s2 //s2 = 0.011962890625
mul.ss s2, s2, s2 //s2 = 1.431e-4
sub.ss s1, s1, s2 //s2 = 0.19999116, diff. from 0.20... is 8.83e-6
add.is s2, s0, 0.0546875 //helper value
mul.ss s2, s2, s2 //0.0029907
mul.ss s2, s2, s2 //8.944e-6
add.ss s1, s1, s2 //s1 = 0.2000001110. Diff from 0.20... is 1.11e-7
eend
pend

//Set v0=0.2, v1=1 in both threads
pstart double
estart
mul.sv v0, s0, v0 //clear v0
add.iv v1, v0, 1  //v1 = 1
add.sv v0, s1, v0 //v0 / 0.2
eend
pend

//Init X, XPHYS and DV vectors
//Using values already stored in v0,v1 in both threads
pstart nelemvec
estart
eend
st.vec v0, X
st.vec v0, XPHYS
st.vec v1, DV
pend

//First call to adfg before entering top3dcg loop
applyDensityFilterGradient(DV)

//Set up loop counter
pstart single
estart
add.ss s15, s0, s0 //s15 = loop = 0
eend
pend

//Start of the main loop
TOP3DCG:

//Clear all vectors used in solvestateCG except for U and F
pstart double
estart
mul.sv v0, s0, v0 //clear v0 in both threads
eend
pend

//Store the cleared vectors
pstart ndof
estart
eend
st.vec v0, R
st.vec v0, Z
st.vec v0, P
st.vec v0, Q
st.vec v0, INVD
st.vec v0, TMP
pend

//Perform initial applyStateOperator call to xPhys, U and R
applyStateOperator(XPHYS, U, R)

//Calculate r[i]=b[i]-r[i]
//b is the forcing vector, here known as F
pstart ndof
ld.vec v0, R
ld.vec v1, F
estart
sub.vv v0, v1, v0 //r[i]=b[i]-r[i]
eend
st.vec v0, R
pend

//Generate matrix diagonal.
//Always uses XPHYS as input and INVD as output
generateMatrixDiagonal()

//Calculate bnorm = norm(F)=sqrt(sum(F[i]*F[i]))
//Calculate the sum
pstart ndof
ld.vec v0, F
estart
mac.vv s13, v0, v0
eend
pend

//Calculate the square root of sum(F) to get bnorm
sqrt_S_unrolled(s13, s1, s2, s3)

//Setup scalar values for CG loop
pstart single
estart
add.ss s12, s0, s0 //s12 = rho
add.ss s11, s0, s0 //s11 = rhoold
add.ss s10, s0, s0 //s10 = dpr
add.ss s9, s0, s0  //s9  = alpha
add.ss s8, s0, s0  //s8  = cgIter
add.is s7, s0, 5   //s7  = 5
mul.is s7, s7, 5   //s7  = 25
mul.ss s7, s7, s7  //s7  = 625
mul.is s7, s7, 4   //s7  = 2500
mul.is s7, s7, 4   //s7  = 10000 = maxIter
add.is s6, s0, 0.0078125 //smallest imm value possible
mul.ss s6, s6, s6  //s6 = 6.1e-5
mul.is s6, s6, 0.1640625 //s6 ~= 1e-5 = cgTol
eend
pend

//Start CG Loop
CG_MAIN_LOOP:

//Update values of z
pstart ndof
ld.vec v0, INVD
ld.vec v1, R
estart
mul.vv v2, v0, v1 //z[i]=invd[i]*r[i]
eend
st.vec v2, Z
pend

//Calculate rho=dpr(R,Z)
pstart ndof
ld.vec v0, R
ld.vec v1, Z
estart
mac.vv s12, v0, v1 = s12=rho=dpr(R, Z)
eend
pend


//Update values in P
//Different methods depending on whether this is the first invocation or not
bne s8, s0, CG_P_NOT_FIRST_ITER //when cgIter != 0, branch
pstart ndof //First iteration, p[i]=z[i]
ld.vec v0, Z
estart
eend
st.vec v0, P //p[i]=z[i]
pend
beq s0, s0 CG_POST_P_UPDATE //Unconditional branch to post_p_update

//Not first iteration, p=beta*p[i]+z[i]
//Calculate value of beta
CG_P_NOT_FIRST_ITER:
pstart single
estart
div.ss s1, s12, s11 //s1 = beta=rho/rhoOld
eend
pend

pstart ndof //Update values in p using beta
ld.vec v0, Z
ld.vec v1, P
estart
mul.sv v1, s1, v1 //v1 = beta*p[i]
add.vv v1, v1, v0 //v1 = beta*pi[i] + z[i]
eend
st.vec v1, P
pend

CG_POST_P_UPDATE:

//Call ASO with P as input and Q as output
applyStateOperator(XPHYS, P, Q)

//Calculate dpr=dpr(P,Q)
pstart ndof
ld.vec v0, P
ld.vec v1, Q
estart
mac.vv s10, v0, v1 //s10 = dpr(P, Q)=dpr
eend
pend

//calculate alpha, rhoOld
pstart single
estart
div.ss s9, s12, s10 //s9=alpha=rho/dpr
add.ss s11, s12, s0 //s11 = rhoold = rho
eend
pend


//Update values of U and R
pstart ndof
ld.vec v0, U
ld.vec v1, R
ld.vec v2, P
ld.vec v3, Q
estart
mul.sv v2, s9, v2 //v2 = alpha*p[i]
mul.sv v3, s9, v3 //v3 = alpha*q[i]
add.vv v0, v0, v2 //v0 = u[i] += alpha*p[i]
sub.vv v1, v1, v3 //v1 = r[i] -= alpha*q[i]
eend
st.vec v0, U
st.vec v1, R
pend

//Calculate relres
//First, sum values in in R: sum(R[i]*R[i])
pstart ndof
ld.vec v0, R
estart
mac.vv s1, v0, v0 //s1 = dpr(R, R)
eend
pend

//The value of relres may become very small, requiring a lot of iterations of the sqrt algorithm
//Using a looped version of sqrt_S to perform 20 iterations
//s1 = input/output, norm(R)
//s2,s3,s4 = temp registers
//RELRES: Label for symbol table
sqrt_S(s1, s2, s3, s4, RELRES)

//Calculate relres, increment cgIter
pstart single
estart
div.ss s1, s1, s13 //s1 = norm(r)/bnorm = relres
add.is s8, s8, 1 //cgIter++
eend
pend

//Check if loop is finished or more iterations are necessary
blt s1, s6, CG_END_LOOP  //if relres < tol, break out
bge s8, s7, CG_END_LOOP  //if cgIter >= maxIter, break out
beq s0, s0, CG_MAIN_LOOP //else, return to top of loop for another iteration

CG_END_LOOP:

//Get compliance and sensitivity after finishing CG loop
getComplianceAndSensitivity(XPHYS, U, DC)

//Call to applyDensityFilterGradient, now on DC
applyDensityFilterGradient(DC)

//Sum values in xphys for g,vol computations
pstart nelemvec
ld.vec v0, XPHYS
estart
mac.iv s1, v0, 1 //s1 = sum(xphys)
eend
pend


//Calculate g and vol, set up values for lagrange loop
//NOTE: If grid size is changed from 6x6x6, so too must this code be changed,
//as the value of "nelem" is coded in here.
//Likewise for the value of volfrac
pstart single
estart
add.is s3, s0, 6  //s3 = 6
mul.is s3, s3, 6  //s3 = 36
mul.is s3, s3, 6  //s3 = 216 = nelem
div.ss s2, s1, s3 //s2 = sum(xphys)/nelem = vol
add.is s13, s2, -0.2 //s13 = sum(xphys)/nelem - volfrac = g

//Set up constants
//l1, l2
add.ss s11, s0, s0   //s11 = l1 = 0
add.is s12, s0, 7.9  //s12 = 7.9
mul.is s12, s12, 7.9 //s12 = 62.4
mul.ss s12, s12, s12 //s12 = 3895
mul.is s12, s12, 7.9 //s12 = 30770 = l2
//NOTE: s12 cannot be much higher, since it can be at most 2^15=32768
//move and tolerance
add.is s10, s0, 0.2  //s10 = move = 0.2
add.is s9, s0, 0.03162277 //s9 = 0.031..
mul.ss s9, s9, s9 //s9 = 0.001
mul.ss s9, s9, s9 //s9 =~ 1-e6 = tolerance
eend
pend


LAGRANGE_START:
//Calculate ratio between l2,l1 values, check if we're finished
pstart single
estart
sub.ss s1, s12, s11 //s1 = l2-l1
add.ss s2, s12, s11 //s2 = l2+l1
div.ss s1, s1, s2   //s1 = (l2-l1)/(l2+l1)
eend
pend

blt s1, s9, LAGRANGE_END //if (l2-l1)/(l2+l1) < tolerance, we're finished

//Calculate lmid
pstart single
estart
mul.is s7, s2, 0.5 //s7 = (l2+l1)/2 = lmid
add.ss s6, s0, s0 //clear s6 for gt calculation afterwards
eend
pend

//Calculate xnew values
pstart nelemvec
ld.vec v0, DV
ld.vec v1, DC
ld.vec v3, X
estart
mul.sv v0, s7, v0 //v0 = dv[i]*lmid
div.vv v0, v1, v0 //v0 = dc[i]/(dv[i]*lmid)
mul.iv v0, v0, -1 //v0 = -dc[i]/(dv[i]*lmid)
//Get square root of value in v0
sqrt_V_inline(v0, v1, v2)
mul.vv v0, v0, v3   //v0 = x[i]*sqrt(..)
add.iv v1, v3, 0.2  //v1 = x[i]+move
add.iv v2, v3, -0.2 //v2 = x[i]-move
min.vv v0, v0, v1   //v0 = min(x[i]+move, x[i]*sqrt(..))
min.iv v0, v0, 1    //v0 = min(1.0, min(...))
max.vv v0, v0, v2   //v0 = max(x[i]-move, min(...))
max.iv v0, v0, 0    //v0 = max(0.0, max(...))
eend
st.vec v0, XNEW
pend


//Calculate value of gt
pstart nelemvec
ld.vec v0, XNEW
ld.vec v1, X
ld.vec v2, DV
estart
sub.vv v0, v0, v1 //v0 = xnew[i]-x[i]
red.vv x0, v0, v2 //x0 = dv[i]*(xnew[i]-x[i]), summation
mul.sx x1, s0, x1 //clear x1
add.ix x1, x1, 1  //x1 = 1
red.xx s1, x0, x1 //x0 = sum(dv[i]...)
add.ss s6, s6, s1 //s6 = sum(dv[i]*(xnew[i]-x[i])=gt
eend
pend

//Increment value of gt with value of g
pstart single
estart
add.ss s1, s6, s13 //s1 = gt + g
eend
pend

//Update either l1 or l2
bge s1, s0, GT_POSITIVE //if gt >= 0, l1=lmid
//otherwise, l2 = lmid
pstart single
estart
add.ss s12, s0, s7 //s12 = s7 (l2 = lmid)
eend
pend
beq s0, s0 LAGRANGE_START //Branch back to start, check if loop is finished there

GT_POSITIVE:
pstart single
estart
add.ss s11, s0, s7 //s11 = s7 (l1 = lmid)
eend
pend
beq s0, s0, LAGRANGE_START //Branch back to start, check if loop is finished there

LAGRANGE_END:


//Calculate change value
//We wish to find the largest amount of change in any one of the design variables
//We do this by finding the VREG_DEPTH largest design variables in both thread0 and thread1
//We then compare these values to our wanted amount of change, 0.01
//If all change values are less than 0.01, then max(0.01, change) will return 0.01 in all
//vregs. Since we know the number of vregs, if the sum of all max()-values is less than or equal to a
//specific value, we know that we have reached convergence

//Clear and set vectors in both threads
pstart double
estart
add.ss s14, s0, s0 //s14 = change = 0
add.is s2, s0, 0.1 //s2 = 0.1
mul.ss s2, s2, s2  //s2 = 0.010315 =~0.01
mul.sv v0, s0, v0  //clear v0, change vector
mul.sv v1, s0, v1  //clear v1
add.iv v1, v1, 1   //v1 = 1
mul.sx x1, s0, x1  //Clear x1
add.ix x1, x1, 1   //x1 = 1
eend
pend


//Determine largest change values, set x=xnew
pstart nelemvec
ld.vec v2, X
ld.vec v3, XNEW
estart
sub.vv v2, v2, v3 //v2 = x[i]-xnew[i]
abs.vv v2, v2     //v2 = abs(x[i]-xnew[i])
max.vv v0, v0, v2 //v0 = max(change, abs(x[i]-xnew[i]))
eend
st.vec v3, X //x[i] = xnew[i]
pend


//Compare change values
//Only operating on stored values now
pstart double
estart
max.sv v0, s2, v0   //max of change values and 0.01
red.vv x0, v0, v1   //sum values in v-registers into x0
//executing red.vv immediatedly followed by red.xx stalls the accelerator.
//I don't really know why, and don't want to bother fixing it right now.
//Inserting a nop resolves this
add.ss s0, s0, s0
red.xx s1, x0, x1   //sum values in x0 into s1
add.ss s14, s1, s14 //add this thread's contribution to total change amount into s14
eend
pend

//At the end of above loop, s14 contains sum of change values
//If value in s14 <= 0.01*2*ELEMS_PER_VSLOT, we are finished
//Currently, ELEMS_PER_VSLOT = 8*24=192, so this becomes 0.01*2*192=0.01*384=3.84
//The threshold value is not exactly 0.01 but 0.0103, so our threshold becomes 0.0103*384=3.96
//For our threshold, if the sum of change values is less than 4, we see it as convergence

//perform applyDensityFilter before checking if loop is finished
applyDensityFilter(X, XPHYS)

//Increment loop counter
//load threshold=4 into s2
//load maxLoop=100 value into s3
pstart single
estart
add.is s15, s15, 1 //loop++
add.is s2, s0, 4   //s2 = 4 = threshold value for change and convergence
add.is s3, s0, 5   //s3 = 5
mul.is s3, s3, 5   //s3 = 25
mul.is s3, s3, 4   //s3 = 100, max number of top loops
eend
pend

//Continue looping while change > 4 && loop < 100
//If either change <=4 or loop >= 100, we exit
bge s15, s3, END //if loop >= 100, go to end
blt s14, s2, END //if change <=4, go to end

beq s0, s0, TOP3DCG //otherwise, unconditional branch back to the start of top loop

END:
tend //Stop timing module

HALT:
beq s0, s0, HALT //infinite loop